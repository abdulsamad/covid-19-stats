{"version":3,"sources":["components/Nav.js","components/Autocomplete.js","components/Loader.js","components/Global.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","title","alignLinks","brand","className","href","centerLogo","id","menuIcon","options","draggable","edge","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","outDuration","preventScrolling","Autocomplete","updateSearched","useState","countries","setCountries","slugs","setSlugs","useEffect","fetch","then","res","json","obj","key","Country","trim","Slug","data","limit","onAutocomplete","country","name","slug","placeholder","Loader","active","color","flashing","size","Global","loading","setloading","count","setCount","newCases","setNewCases","lastUpdated","setLastUpdated","countryCode","setCountryCode","Countries","current","totalCount","confirmed","TotalConfirmed","recovered","TotalRecovered","deaths","TotalDeaths","newCount","NewConfirmed","NewRecovered","NewDeaths","CountryCode","Date","slice","formatNumber","num","undefined","Intl","NumberFormat","maximumSignificantDigits","format","aria-label","style","fontSize","s","Footer","copyrights","target","rel","App","setCountry","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b7479d42.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar } from \"react-materialize\";\n\nfunction Nav({ title }) {\n  return (\n    <header>\n      <Navbar\n        alignLinks=\"right\"\n        brand={\n          <a className=\"brand-logo\" href=\"#!\">\n            {title}\n          </a>\n        }\n        centerLogo\n        id=\"nav\"\n        menuIcon={false}\n        options={{\n          draggable: true,\n          edge: \"left\",\n          inDuration: 250,\n          onCloseEnd: null,\n          onCloseStart: null,\n          onOpenEnd: null,\n          onOpenStart: null,\n          outDuration: 200,\n          preventScrolling: true,\n        }}\n      ></Navbar>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect, useState } from \"react\";\nimport { Autocomplete as Auto } from \"react-materialize\";\n\nfunction Autocomplete({ updateSearched }) {\n  const [countries, setCountries] = useState({});\n  const [slugs, setSlugs] = useState({});\n\n  useEffect(() => {\n    fetch(\"https://api.covid19api.com/countries\")\n      .then((res) => {\n        return res.json();\n      })\n      .then((res) => {\n        const obj = {};\n        const slugs = {};\n\n        for (const key of res) {\n          if (key.Country !== \"\") {\n            obj[key.Country.trim()] = null;\n            slugs[key.Country.trim()] = key.Slug.trim();\n          }\n        }\n\n        setSlugs(slugs);\n        setCountries(obj);\n      });\n  }, []);\n\n  const onAutoComplete = (country) => {\n    updateSearched({\n      name: country,\n      slug: slugs[country],\n    });\n  };\n\n  return (\n    <section className=\"center-align\">\n      <Auto\n        id=\"Autocomplete-1\"\n        className=\"autocomplete-container\"\n        options={{\n          data: countries,\n          limit: 10,\n          onAutocomplete: onAutoComplete,\n        }}\n        name=\"autocomplete\"\n        placeholder=\"Enter a Country Name Here\"\n      />\n    </section>\n  );\n}\n\nexport default Autocomplete;\n","import React from \"react\";\nimport { Preloader } from \"react-materialize\";\n\nfunction Loader() {\n  return (\n    <section className=\"section center-align loader-container\">\n      <Preloader active color=\"red\" flashing={false} size=\"big\" />\n    </section>\n  );\n}\n\nexport default Loader;\n","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col } from 'react-materialize';\nimport ReactCountryFlag from 'react-country-flag';\n\nimport Loader from './Loader';\n\nfunction Global({ country }) {\n  const [loading, setloading] = useState(true);\n  const [count, setCount] = useState({});\n  const [newCases, setNewCases] = useState({});\n  const [lastUpdated, setLastUpdated] = useState('');\n  const [countryCode, setCountryCode] = useState('');\n\n  useEffect(() => {\n    if (country !== null) {\n      fetch(`https://api.covid19api.com/summary`)\n        .then((res) => res.json())\n        .then((res) => {\n          const countries = res.Countries;\n\n          for (const key in countries) {\n            const current = countries[key];\n            if (current['Slug'] === country.slug) {\n              const totalCount = {\n                confirmed: current.TotalConfirmed,\n                recovered: current.TotalRecovered,\n                deaths: current.TotalDeaths,\n              };\n\n              const newCount = {\n                confirmed: current.NewConfirmed,\n                recovered: current.NewRecovered,\n                deaths: current.NewDeaths,\n              };\n\n              setCount(totalCount);\n              setNewCases(newCount);\n              setCountryCode(current.CountryCode);\n              break;\n            }\n          }\n\n          setLastUpdated(res.Date.slice(0, 10));\n\n          /* Loading */\n          setloading(false);\n        });\n    }\n  }, [country]);\n\n  const formatNumber = (num) => {\n    if (num <= 0 || num === undefined) {\n      return '-';\n    } else {\n      return new Intl.NumberFormat('en-IN', {\n        maximumSignificantDigits: 8,\n      }).format(num);\n    }\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <div>\n      <section className=\"center-align\">\n        <h4>{country.name}</h4>\n        <ReactCountryFlag\n          countryCode={countryCode}\n          aria-label={country.name}\n          title={country.name}\n          style={{\n            fontSize: '5rem',\n          }}\n        />\n        <br />\n      </section>\n\n      {/* Total Cases */}\n      <h5 className=\"center-align\">Count</h5>\n      <section className=\"section\">\n        <Card>\n          <Row className=\"\">\n            <Col s={6} className=\"total-cases\">\n              <h6 className=\"center-align\">Total</h6>\n              <h5 className=\"center-align\">{formatNumber(count.confirmed)}</h5>\n            </Col>\n            <Col s={6} className=\"total-recovered\">\n              <h6 className=\"center-align\">Recovered</h6>\n              <h5 className=\"center-align\">{formatNumber(count.recovered)}</h5>\n            </Col>\n          </Row>\n          <Row>\n            <Col s={6} className=\"total-deaths\">\n              <h6 className=\"center-align\">Deaths</h6>\n              <h5 className=\"center-align\">{formatNumber(count.deaths)}</h5>\n            </Col>\n            <Col s={6}>\n              <h6 className=\"center-align\">Last Updated</h6>\n              <h5 className=\"center-align\">{lastUpdated}</h5>\n            </Col>\n          </Row>\n          <div className=\"center-align\">\n            <blockquote>Source: covid19api.com</blockquote>\n          </div>\n        </Card>\n      </section>\n\n      {/* New Cases */}\n      <h5 className=\"center-align\">New Cases</h5>\n      <section className=\"section\">\n        <Card>\n          <Row>\n            <Col s={6} className=\"total-cases\">\n              <h5 className=\"center-align\">New Cases</h5>\n              <h5 className=\"center-align\">{formatNumber(newCases.confirmed)}</h5>\n            </Col>\n            <Col s={6} className=\"total-recovered\">\n              <h5 className=\"center-align\">New Recovered</h5>\n              <h5 className=\"center-align\">{formatNumber(newCases.recovered)}</h5>\n            </Col>\n          </Row>\n          <Row>\n            <Col s={6} className=\"total-deaths\">\n              <h5 className=\"center-align\">New Deaths</h5>\n              <h5 className=\"center-align\">{formatNumber(newCases.deaths)}</h5>\n            </Col>\n            <Col s={6}>\n              <h5 className=\"center-align\">Last Updated</h5>\n              <h5 className=\"center-align\">{lastUpdated}</h5>\n            </Col>\n          </Row>\n          <div className=\"center-align\">\n            <blockquote>Source: covid19api.com</blockquote>\n          </div>\n        </Card>\n      </section>\n    </div>\n  );\n}\n\nexport default Global;\n","import React from \"react\";\nimport { Footer as Foot } from \"react-materialize\";\n\nfunction Footer() {\n  return (\n    <Foot className=\"footer\" copyrights=\"Created By Abdul Samad\">\n      <h6 className=\"white-text\">Special Thanks to</h6>\n      <ul>\n        <li>\n          <a\n            className=\"grey-text text-lighten-3\"\n            href=\"https://github.com/covid19india/\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            COVID-19INDIA\n          </a>\n        </li>\n        <li>\n          <a\n            className=\"grey-text text-lighten-3\"\n            target=\"_blank\"\n            href=\"https://covid19api.com/\"\n            rel=\"noreferrer noopener\"\n          >\n            KYLE REDELINGHUYS\n          </a>\n        </li>\n      </ul>\n      <h6>for the API.</h6>\n    </Foot>\n  );\n}\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport './App.scss';\n// eslint-disable-next-line\nimport M from 'materialize-css';\nimport Nav from './components/Nav';\nimport Autocomplete from './components/Autocomplete';\nimport Global from './components/Global';\nimport Footer from './components/Footer';\n\nfunction App() {\n  const [country, setCountry] = useState({\n    name: 'India',\n    slug: 'india',\n  });\n\n  const updateSearched = (country) => {\n    setCountry(country);\n  };\n\n  return (\n    <div className=\"App\">\n      <Nav title=\"Covid-19 Stats\" />\n      <Autocomplete updateSearched={updateSearched} />\n      <div className=\"container\">\n        <Global country={country} />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}